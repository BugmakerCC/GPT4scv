INFO:Slither:Compilation warnings/errors on /sb/smart_billions.sol:
/sb/smart_billions.sol:85:5: Warning: Use of the "var" keyword is deprecated.
    var _allowance = allowed[_from][msg.sender];
    ^------------^
/sb/smart_billions.sol:182:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function SmartBillions() {
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/smart_billions.sol:57:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(msg.sender, owner, _value);
        ^---------------------------------^
/sb/smart_billions.sol:62:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(msg.sender, _to, _value);
        ^-------------------------------^
/sb/smart_billions.sol:91:5: Warning: Invoking events without "emit" prefix is deprecated.
    Transfer(_from, _to, _value);
    ^--------------------------^
/sb/smart_billions.sol:102:5: Warning: Invoking events without "emit" prefix is deprecated.
    Approval(msg.sender, _spender, _value);
    ^------------------------------------^
/sb/smart_billions.sol:318:32: Warning: Using contract member "balance" inherited from the address type is deprecated. Convert the contract to "address" type to access the member, for example use "address(contract).balance" instead.
        require(_amount > 0 && this.balance >= (investBalance * 9 / 10) + walletBalance + _amount);
                               ^----------^
/sb/smart_billions.sol:320:33: Warning: Using contract member "balance" inherited from the address type is deprecated. Convert the contract to "address" type to access the member, for example use "address(contract).balance" instead.
            require((_amount <= this.balance / 400) && coldStoreLast + 4 * 60 * 24 * 7 <= block.number);
                                ^----------^
/sb/smart_billions.sol:370:23: Warning: Using contract member "balance" inherited from the address type is deprecated. Convert the contract to "address" type to access the member, for example use "address(contract).balance" instead.
        uint maxpay = this.balance / 2;
                      ^----------^
/sb/smart_billions.sol:427:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(address(0),msg.sender,senderBalance); // for etherscan
        ^-------------------------------------------^
/sb/smart_billions.sol:428:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(address(0),owner,ownerBalance); // for etherscan
        ^-------------------------------------^
/sb/smart_billions.sol:429:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(address(0),animator,animatorBalance); // for etherscan
        ^-------------------------------------------^
/sb/smart_billions.sol:430:9: Warning: Invoking events without "emit" prefix is deprecated.
        LogInvestment(msg.sender,_partner,investing);
        ^------------------------------------------^
/sb/smart_billions.sol:440:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(msg.sender,address(0),balances[msg.sender]); // for etherscan
        ^--------------------------------------------------^
/sb/smart_billions.sol:477:9: Warning: Invoking events without "emit" prefix is deprecated.
        LogDividend(_who,balance,last);
        ^----------------------------^
/sb/smart_billions.sol:552:13: Warning: Invoking events without "emit" prefix is deprecated.
            LogLate(msg.sender,player.blockNum,block.number);
            ^----------------------------------------------^
/sb/smart_billions.sol:574:17: Warning: Invoking events without "emit" prefix is deprecated.
                LogLate(msg.sender,player.blockNum,block.number);
                ^----------------------------------------------^
/sb/smart_billions.sol:581:13: Warning: Invoking events without "emit" prefix is deprecated.
            LogWin(msg.sender,uint(player.betHash),uint(hash),prize);
            ^------------------------------------------------------^
/sb/smart_billions.sol:584:17: Warning: Invoking events without "emit" prefix is deprecated.
                LogRecordWin(msg.sender,prize);
                ^----------------------------^
/sb/smart_billions.sol:589:13: Warning: Invoking events without "emit" prefix is deprecated.
            LogLoss(msg.sender,uint(player.betHash),uint(hash));
            ^-------------------------------------------------^
/sb/smart_billions.sol:618:32: Warning: "sha3" has been deprecated in favour of "keccak256"
        return playSystem(uint(sha3(msg.sender,block.number)), address(0));
                               ^---------------------------^
/sb/smart_billions.sol:618:32: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return playSystem(uint(sha3(msg.sender,block.number)), address(0));
                               ^---------------------------^
/sb/smart_billions.sol:626:32: Warning: "sha3" has been deprecated in favour of "keccak256"
        return playSystem(uint(sha3(msg.sender,block.number)), _partner);
                               ^---------------------------^
/sb/smart_billions.sol:626:32: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return playSystem(uint(sha3(msg.sender,block.number)), _partner);
                               ^---------------------------^
/sb/smart_billions.sol:660:13: Warning: Invoking events without "emit" prefix is deprecated.
            LogBet(msg.sender,uint(bethash),hashNext,msg.value);
            ^-------------------------------------------------^
/sb/smart_billions.sol:25:3: Warning: No visibility specified. Defaulting to "public". 
  function balanceOf(address who) constant returns (uint);
  ^------------------------------------------------------^
/sb/smart_billions.sol:26:3: Warning: No visibility specified. Defaulting to "public". 
  function transfer(address to, uint value);
  ^----------------------------------------^
/sb/smart_billions.sol:32:3: Warning: No visibility specified. Defaulting to "public". 
  function allowance(address owner, address spender) constant returns (uint);
  ^-------------------------------------------------------------------------^
/sb/smart_billions.sol:33:3: Warning: No visibility specified. Defaulting to "public". 
  function transferFrom(address from, address to, uint value);
  ^----------------------------------------------------------^
/sb/smart_billions.sol:34:3: Warning: No visibility specified. Defaulting to "public". 
  function approve(address spender, uint value);
  ^--------------------------------------------^
/sb/smart_billions.sol:51:3: Warning: No visibility specified. Defaulting to "public". 
  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {
  ^ (Relevant source part starts here and spans across multiple lines).
/sb/smart_billions.sol:70:3: Warning: No visibility specified. Defaulting to "public". 
  function balanceOf(address _owner) constant returns (uint balance) {
  ^ (Relevant source part starts here and spans across multiple lines).
/sb/smart_billions.sol:84:3: Warning: No visibility specified. Defaulting to "public". 
  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {
  ^ (Relevant source part starts here and spans across multiple lines).
/sb/smart_billions.sol:98:3: Warning: No visibility specified. Defaulting to "public". 
  function approve(address _spender, uint _value) {
  ^ (Relevant source part starts here and spans across multiple lines).
/sb/smart_billions.sol:110:3: Warning: No visibility specified. Defaulting to "public". 
  function allowance(address _owner, address _spender) constant returns (uint remaining) {
  ^ (Relevant source part starts here and spans across multiple lines).
/sb/smart_billions.sol:182:5: Warning: No visibility specified. Defaulting to "public". 
    function SmartBillions() {
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/smart_billions.sol:523:43: Warning: "block.blockhash()" has been deprecated in favor of "blockhash()"
            return(betPrize(player,uint24(block.blockhash(player.blockNum))));
                                          ^-------------^
/sb/smart_billions.sol:560:27: Warning: "block.blockhash()" has been deprecated in favor of "blockhash()"
            hash = uint24(block.blockhash(player.blockNum));
                          ^-------------^
/sb/smart_billions.sol:700:24: Warning: "block.blockhash()" has been deprecated in favor of "blockhash()"
        return( ( uint(block.blockhash(_lastb  )) & 0xFFFFFF )
                       ^-------------^
/sb/smart_billions.sol:702:24: Warning: "block.blockhash()" has been deprecated in favor of "blockhash()"
            | ( ( uint(block.blockhash(_lastb+1)) & 0xFFFFFF ) << 24 )
                       ^-------------^
/sb/smart_billions.sol:704:24: Warning: "block.blockhash()" has been deprecated in favor of "blockhash()"
            | ( ( uint(block.blockhash(_lastb+2)) & 0xFFFFFF ) << 48 )
                       ^-------------^
/sb/smart_billions.sol:706:24: Warning: "block.blockhash()" has been deprecated in favor of "blockhash()"
            | ( ( uint(block.blockhash(_lastb+3)) & 0xFFFFFF ) << 72 )
                       ^-------------^
/sb/smart_billions.sol:708:24: Warning: "block.blockhash()" has been deprecated in favor of "blockhash()"
            | ( ( uint(block.blockhash(_lastb+4)) & 0xFFFFFF ) << 96 )
                       ^-------------^
/sb/smart_billions.sol:710:24: Warning: "block.blockhash()" has been deprecated in favor of "blockhash()"
            | ( ( uint(block.blockhash(_lastb+5)) & 0xFFFFFF ) << 120 )
                       ^-------------^
/sb/smart_billions.sol:712:24: Warning: "block.blockhash()" has been deprecated in favor of "blockhash()"
            | ( ( uint(block.blockhash(_lastb+6)) & 0xFFFFFF ) << 144 )
                       ^-------------^
/sb/smart_billions.sol:714:24: Warning: "block.blockhash()" has been deprecated in favor of "blockhash()"
            | ( ( uint(block.blockhash(_lastb+7)) & 0xFFFFFF ) << 168 )
                       ^-------------^
/sb/smart_billions.sol:716:24: Warning: "block.blockhash()" has been deprecated in favor of "blockhash()"
            | ( ( uint(block.blockhash(_lastb+8)) & 0xFFFFFF ) << 192 )
                       ^-------------^
/sb/smart_billions.sol:718:24: Warning: "block.blockhash()" has been deprecated in favor of "blockhash()"
            | ( ( uint(block.blockhash(_lastb+9)) & 0xFFFFFF ) << 216 )
                       ^-------------^
/sb/smart_billions.sol:10:3: Warning: Function state mutability can be restricted to pure
  function sub(uint a, uint b) internal returns (uint) {
  ^ (Relevant source part starts here and spans across multiple lines).
/sb/smart_billions.sol:14:3: Warning: Function state mutability can be restricted to pure
  function add(uint a, uint b) internal returns (uint) {
  ^ (Relevant source part starts here and spans across multiple lines).
/sb/smart_billions.sol:482:5: Warning: Function state mutability can be restricted to pure
    function betPrize(Bet _player, uint24 _hash) constant private returns (uint) { // house fee 13.85%
    ^ (Relevant source part starts here and spans across multiple lines).

INFO:Detectors:[93m
ERC20Basic (/sb/smart_billions.sol#21-29) has incorrect ERC20 function interface(s):
	-transfer (/sb/smart_billions.sol#26)
ERC20 (/sb/smart_billions.sol#31-36) has incorrect ERC20 function interface(s):
	-transferFrom (/sb/smart_billions.sol#33)
	-approve (/sb/smart_billions.sol#34)
BasicToken (/sb/smart_billions.sol#38-73) has incorrect ERC20 function interface(s):
	-transfer (/sb/smart_billions.sol#51-64)
StandardToken (/sb/smart_billions.sol#75-113) has incorrect ERC20 function interface(s):
	-transferFrom (/sb/smart_billions.sol#84-92)
	-approve (/sb/smart_billions.sol#98-103)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#incorrect-erc20-interface[0m
INFO:Detectors:[93m
SmartBillions.addHashes (/sb/smart_billions.sol#672-689) uses a dangerous strict equality:
	- require(bool)(hashFirst == 0 && _sadd > 0 && _sadd <= hashesSize)
SmartBillions.addHashes (/sb/smart_billions.sol#672-689) uses a dangerous strict equality:
	- require(bool)(hashFirst == 0 && _sadd > 0 && _sadd <= hashesSize)
SmartBillions.betOf (/sb/smart_billions.sol#513-535) uses a dangerous strict equality:
	- (player.value == 0) || (player.blockNum <= 1) || (block.number < player.blockNum) || (block.number >= player.blockNum + (10 * hashesSize))
	- hash == 0x1000000
SmartBillions.addHashes (/sb/smart_billions.sol#672-689) uses a dangerous strict equality:
	- require(bool)(hashFirst == 0 && _sadd > 0 && _sadd <= hashesSize)
SmartBillions.betOf (/sb/smart_billions.sol#513-535) uses a dangerous strict equality:
	- (player.value == 0) || (player.blockNum <= 1) || (block.number < player.blockNum) || (block.number >= player.blockNum + (10 * hashesSize))
	- hash == 0x1000000
SmartBillions.betPrize (/sb/smart_billions.sol#482-508) uses a dangerous strict equality:
	- (hit & 0xF) == 0
	- (hit & 0xF0) == 0
	- (hit & 0xF0) == 0
	- (hit & 0xF00) == 0
	- (hit & 0xF00) == 0
	- (hit & 0xF00) == 0
	- (hit & 0xF00) == 0
	- (hit & 0xF000) == 0
	- (hit & 0xF000) == 0
	- (hit & 0xF000) == 0
	- (hit & 0xF000) == 0
	- (hit & 0xF000) == 0
	- (hit & 0xF000) == 0
	- (hit & 0xF000) == 0
	- (hit & 0xF000) == 0
	- (hit & 0xF0000) == 0
	- (hit & 0xF0000) == 0
	- (hit & 0xF0000) == 0
	- (hit & 0xF0000) == 0
	- (hit & 0xF0000) == 0
	- (hit & 0xF0000) == 0
	- (hit & 0xF0000) == 0
	- (hit & 0xF0000) == 0
	- (hit & 0xF0000) == 0
	- (hit & 0xF0000) == 0
	- (hit & 0xF0000) == 0
	- (hit & 0xF0000) == 0
	- (hit & 0xF0000) == 0
	- (hit & 0xF0000) == 0
	- (hit & 0xF0000) == 0
	- (hit & 0xF0000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
SmartBillions.addHashes (/sb/smart_billions.sol#672-689) uses a dangerous strict equality:
	- require(bool)(hashFirst == 0 && _sadd > 0 && _sadd <= hashesSize)
SmartBillions.betOf (/sb/smart_billions.sol#513-535) uses a dangerous strict equality:
	- (player.value == 0) || (player.blockNum <= 1) || (block.number < player.blockNum) || (block.number >= player.blockNum + (10 * hashesSize))
	- hash == 0x1000000
SmartBillions.betPrize (/sb/smart_billions.sol#482-508) uses a dangerous strict equality:
	- (hit & 0xF) == 0
	- (hit & 0xF0) == 0
	- (hit & 0xF0) == 0
	- (hit & 0xF00) == 0
	- (hit & 0xF00) == 0
	- (hit & 0xF00) == 0
	- (hit & 0xF00) == 0
	- (hit & 0xF000) == 0
	- (hit & 0xF000) == 0
	- (hit & 0xF000) == 0
	- (hit & 0xF000) == 0
	- (hit & 0xF000) == 0
	- (hit & 0xF000) == 0
	- (hit & 0xF000) == 0
	- (hit & 0xF000) == 0
	- (hit & 0xF0000) == 0
	- (hit & 0xF0000) == 0
	- (hit & 0xF0000) == 0
	- (hit & 0xF0000) == 0
	- (hit & 0xF0000) == 0
	- (hit & 0xF0000) == 0
	- (hit & 0xF0000) == 0
	- (hit & 0xF0000) == 0
	- (hit & 0xF0000) == 0
	- (hit & 0xF0000) == 0
	- (hit & 0xF0000) == 0
	- (hit & 0xF0000) == 0
	- (hit & 0xF0000) == 0
	- (hit & 0xF0000) == 0
	- (hit & 0xF0000) == 0
	- (hit & 0xF0000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
SmartBillions.putHash (/sb/smart_billions.sol#735-756) uses a dangerous strict equality:
	- lastb == 0 || block.number <= lastb + 10
SmartBillions.addHashes (/sb/smart_billions.sol#672-689) uses a dangerous strict equality:
	- require(bool)(hashFirst == 0 && _sadd > 0 && _sadd <= hashesSize)
SmartBillions.betOf (/sb/smart_billions.sol#513-535) uses a dangerous strict equality:
	- (player.value == 0) || (player.blockNum <= 1) || (block.number < player.blockNum) || (block.number >= player.blockNum + (10 * hashesSize))
	- hash == 0x1000000
SmartBillions.betPrize (/sb/smart_billions.sol#482-508) uses a dangerous strict equality:
	- (hit & 0xF) == 0
	- (hit & 0xF0) == 0
	- (hit & 0xF0) == 0
	- (hit & 0xF00) == 0
	- (hit & 0xF00) == 0
	- (hit & 0xF00) == 0
	- (hit & 0xF00) == 0
	- (hit & 0xF000) == 0
	- (hit & 0xF000) == 0
	- (hit & 0xF000) == 0
	- (hit & 0xF000) == 0
	- (hit & 0xF000) == 0
	- (hit & 0xF000) == 0
	- (hit & 0xF000) == 0
	- (hit & 0xF000) == 0
	- (hit & 0xF0000) == 0
	- (hit & 0xF0000) == 0
	- (hit & 0xF0000) == 0
	- (hit & 0xF0000) == 0
	- (hit & 0xF0000) == 0
	- (hit & 0xF0000) == 0
	- (hit & 0xF0000) == 0
	- (hit & 0xF0000) == 0
	- (hit & 0xF0000) == 0
	- (hit & 0xF0000) == 0
	- (hit & 0xF0000) == 0
	- (hit & 0xF0000) == 0
	- (hit & 0xF0000) == 0
	- (hit & 0xF0000) == 0
	- (hit & 0xF0000) == 0
	- (hit & 0xF0000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
	- (hit & 0xF00000) == 0
SmartBillions.putHash (/sb/smart_billions.sol#735-756) uses a dangerous strict equality:
	- lastb == 0 || block.number <= lastb + 10
SmartBillions.won (/sb/smart_billions.sol#540-591) uses a dangerous strict equality:
	- player.blockNum == 0
	- (player.value == 0) || (player.blockNum == 1)
	- (player.value == 0) || (player.blockNum == 1)
	- hash == 0x1000000
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#dangerous-strict-equalities[0m
INFO:Detectors:[92m
ERC20.allowance.owner (local variable @ /sb/smart_billions.sol#32) shadows:
	- ERC20Basic.owner (state variable @ /sb/smart_billions.sol#23)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#local-variable-shadowing[0m
INFO:Detectors:[92m
SmartBillions.investBalanceMax should be constant (/sb/smart_billions.sol#144)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#state-variables-that-could-be-declared-constant[0m
INFO:Detectors:[92m
Deprecated standard detected @ /sb/smart_billions.sol#523:
	- Usage of "block.blockhash()" should be replaced with "blockhash()"
Deprecated standard detected @ /sb/smart_billions.sol#560:
	- Usage of "block.blockhash()" should be replaced with "blockhash()"
Deprecated standard detected @ /sb/smart_billions.sol#618:
	- Usage of "sha3()" should be replaced with "keccak256()"
Deprecated standard detected @ /sb/smart_billions.sol#626:
	- Usage of "sha3()" should be replaced with "keccak256()"
Deprecated standard detected @ /sb/smart_billions.sol#700-719:
	- Usage of "block.blockhash()" should be replaced with "blockhash()"
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#deprecated-standards[0m
INFO:Detectors:[92m
ERC20Basic.balanceOf (/sb/smart_billions.sol#25) should be declared external
BasicToken.balanceOf (/sb/smart_billions.sol#70-72) should be declared external
ERC20Basic.transfer (/sb/smart_billions.sol#26) should be declared external
BasicToken.transfer (/sb/smart_billions.sol#51-64) should be declared external
ERC20.allowance (/sb/smart_billions.sol#32) should be declared external
StandardToken.allowance (/sb/smart_billions.sol#110-112) should be declared external
ERC20.transferFrom (/sb/smart_billions.sol#33) should be declared external
StandardToken.transferFrom (/sb/smart_billions.sol#84-92) should be declared external
ERC20.approve (/sb/smart_billions.sol#34) should be declared external
StandardToken.approve (/sb/smart_billions.sol#98-103) should be declared external
SmartBillions.playRandom (/sb/smart_billions.sol#625-627) should be declared external
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#public-function-that-could-be-declared-as-external[0m
INFO:Detectors:[92m
Detected issues with version pragma in /sb/smart_billions.sol:
	- pragma solidity^0.4.13 (/sb/smart_billions.sol#7): it allows old versions
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#incorrect-version-of-solidity[0m
INFO:Detectors:[92m
Parameter '_owner' of BasicToken.balanceOf (/sb/smart_billions.sol#70) is not in mixedCase
Parameter '_to' of BasicToken.transfer (/sb/smart_billions.sol#51) is not in mixedCase
Parameter '_value' of BasicToken.transfer (/sb/smart_billions.sol#51) is not in mixedCase
Parameter '_owner' of StandardToken.allowance (/sb/smart_billions.sol#110) is not in mixedCase
Parameter '_spender' of StandardToken.allowance (/sb/smart_billions.sol#110) is not in mixedCase
Parameter '_from' of StandardToken.transferFrom (/sb/smart_billions.sol#84) is not in mixedCase
Parameter '_to' of StandardToken.transferFrom (/sb/smart_billions.sol#84) is not in mixedCase
Parameter '_value' of StandardToken.transferFrom (/sb/smart_billions.sol#84) is not in mixedCase
Parameter '_spender' of StandardToken.approve (/sb/smart_billions.sol#98) is not in mixedCase
Parameter '_value' of StandardToken.approve (/sb/smart_billions.sol#98) is not in mixedCase
Parameter '_who' of SmartBillions.commitDividend (/sb/smart_billions.sol#459) is not in mixedCase
Function 'SmartBillions.SmartBillions' (/sb/smart_billions.sol#182-188) is not in mixedCase
Parameter '_owner' of SmartBillions.walletBalanceOf (/sb/smart_billions.sol#203) is not in mixedCase
Parameter '_owner' of SmartBillions.walletPeriodOf (/sb/smart_billions.sol#211) is not in mixedCase
Parameter '_owner' of SmartBillions.walletBlockOf (/sb/smart_billions.sol#219) is not in mixedCase
Parameter '_owner' of SmartBillions.betValueOf (/sb/smart_billions.sol#227) is not in mixedCase
Parameter '_owner' of SmartBillions.betHashOf (/sb/smart_billions.sol#235) is not in mixedCase
Parameter '_owner' of SmartBillions.betBlockNumberOf (/sb/smart_billions.sol#243) is not in mixedCase
Parameter '_who' of SmartBillions.changeOwner (/sb/smart_billions.sol#267) is not in mixedCase
Parameter '_who' of SmartBillions.changeAnimator (/sb/smart_billions.sol#278) is not in mixedCase
Parameter '_when' of SmartBillions.setInvestStart (/sb/smart_billions.sol#289) is not in mixedCase
Parameter '_maxsum' of SmartBillions.setBetMax (/sb/smart_billions.sol#298) is not in mixedCase
Parameter '_amount' of SmartBillions.coldStore (/sb/smart_billions.sol#316) is not in mixedCase
Parameter '_amount' of SmartBillions.pay (/sb/smart_billions.sol#369) is not in mixedCase
Parameter '_partner' of SmartBillions.invest (/sb/smart_billions.sol#399) is not in mixedCase
Parameter '_player' of SmartBillions.betPrize (/sb/smart_billions.sol#482) is not in mixedCase
Parameter '_hash' of SmartBillions.betPrize (/sb/smart_billions.sol#482) is not in mixedCase
Parameter '_who' of SmartBillions.betOf (/sb/smart_billions.sol#513) is not in mixedCase
Parameter '_partner' of SmartBillions.playRandom (/sb/smart_billions.sol#625) is not in mixedCase
Parameter '_hash' of SmartBillions.playSystem (/sb/smart_billions.sol#633) is not in mixedCase
Parameter '_partner' of SmartBillions.playSystem (/sb/smart_billions.sol#633) is not in mixedCase
Parameter '_sadd' of SmartBillions.addHashes (/sb/smart_billions.sol#672) is not in mixedCase
Parameter '_lastb' of SmartBillions.calcHashes (/sb/smart_billions.sol#698) is not in mixedCase
Parameter '_delta' of SmartBillions.calcHashes (/sb/smart_billions.sol#698) is not in mixedCase
Parameter '_block' of SmartBillions.getHash (/sb/smart_billions.sol#722) is not in mixedCase
Parameter '_num' of SmartBillions.putHashes (/sb/smart_billions.sol#762) is not in mixedCase
Constant 'SmartBillions.hashesSize' (/sb/smart_billions.sol#159) is not in UPPER_CASE_WITH_UNDERSCORES
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#conformance-to-solidity-naming-conventions[0m
INFO:Slither:/sb/smart_billions.sol analyzed (6 contracts), 65 result(s) found
