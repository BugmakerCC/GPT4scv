WARNING:root:You are using solc version 0.4.26, The latest supported version is 0.4.19
INFO:CryticCompile:Compilation warnings/errors on /sb/blackjack.sol:
/sb/blackjack.sol:70:4: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
			throw; // game doesn't exist or already finished
			^---^
/sb/blackjack.sol:91:2: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
	function BlackJack() {
 ^ (Relevant source part starts here and spans across multiple lines).
/sb/blackjack.sol:102:4: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
			throw; // game is already going on
			^---^
/sb/blackjack.sol:106:4: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
			throw; // incorrect bet
			^---^
/sb/blackjack.sol:144:8: Warning: Use of the "var" keyword is deprecated.
		var (houseScore, houseScoreBig) = calculateScore(games[msg.sender].houseCards);
		     ^--------^
/sb/blackjack.sol:144:20: Warning: Use of the "var" keyword is deprecated.
		var (houseScore, houseScoreBig) = calculateScore(games[msg.sender].houseCards);
		                 ^-----------^
/sb/blackjack.sol:161:8: Warning: Use of the "var" keyword is deprecated.
		var (houseScore, houseScoreBig) = calculateScore(game.houseCards);
		     ^--------^
/sb/blackjack.sol:161:20: Warning: Use of the "var" keyword is deprecated.
		var (houseScore, houseScoreBig) = calculateScore(game.houseCards);
		                 ^-----------^
/sb/blackjack.sol:163:8: Warning: Use of the "var" keyword is deprecated.
		var (playerScore, playerScoreBig) = calculateScore(game.playerCards);
		     ^---------^
/sb/blackjack.sol:163:21: Warning: Use of the "var" keyword is deprecated.
		var (playerScore, playerScoreBig) = calculateScore(game.playerCards);
		                  ^------------^
/sb/blackjack.sol:170:37: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
				if (!msg.sender.send(game.bet)) throw; // return bet to the player
				                                ^---^
/sb/blackjack.sol:183:48: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
					if (!msg.sender.send((game.bet * 5) / 2)) throw; // send prize to the player
					                                          ^---^
/sb/blackjack.sol:186:42: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
					if (!msg.sender.send(game.bet * 2)) throw; // send prize to the player
					                                    ^---^
/sb/blackjack.sol:223:43: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
						if (!msg.sender.send(game.bet * 2)) throw; // send prize to the player
						                                    ^---^
/sb/blackjack.sol:236:38: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
					if (!msg.sender.send(game.bet)) throw; // return bet to the player
					                                ^---^
/sb/blackjack.sol:240:42: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
					if (!msg.sender.send(game.bet * 2)) throw; // send prize to the player
					                                    ^---^
/sb/blackjack.sol:268:4: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
			throw;
			^---^
/sb/blackjack.sol:275:4: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
			throw;
			^---^
/sb/blackjack.sol:290:4: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
			throw; // game doesn't exist
			^---^
/sb/blackjack.sol:293:3: Warning: Variable is declared as a storage pointer. Use an explicit "storage" keyword to silence this warning.
		Game game = games[msg.sender];
		^-------^
/sb/blackjack.sol:21:24: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
		return uint8(uint256(keccak256(block.blockhash(b), player, cardNumber, timestamp)) % 52);
		                     ^----------------------------------------------------------^
/sb/blackjack.sol:114:3: Warning: Invoking events without "emit" prefix is deprecated.
		Deal(true, playerCards[0]);
		^------------------------^
/sb/blackjack.sol:116:3: Warning: Invoking events without "emit" prefix is deprecated.
		Deal(false, houseCards[0]);
		^------------------------^
/sb/blackjack.sol:118:3: Warning: Invoking events without "emit" prefix is deprecated.
		Deal(true, playerCards[1]);
		^------------------------^
/sb/blackjack.sol:137:3: Warning: Invoking events without "emit" prefix is deprecated.
		Deal(true, games[msg.sender].playerCards[games[msg.sender].playerCards.length - 1]);
		^---------------------------------------------------------------------------------^
/sb/blackjack.sol:152:4: Warning: Invoking events without "emit" prefix is deprecated.
			Deal(false, newCard);
			^------------------^
/sb/blackjack.sol:165:3: Warning: Invoking events without "emit" prefix is deprecated.
		GameStatus(houseScore, houseScoreBig, playerScore, playerScoreBig);
		^----------------------------------------------------------------^
/sb/blackjack.sol:194:6: Warning: Invoking events without "emit" prefix is deprecated.
					Log(1);
					^----^
/sb/blackjack.sol:21:34: Warning: "block.blockhash()" has been deprecated in favor of "blockhash()"
		return uint8(uint256(keccak256(block.blockhash(b), player, cardNumber, timestamp)) % 52);
		                               ^-------------^
/sb/blackjack.sol:91:2: Warning: No visibility specified. Defaulting to "public". 
	function BlackJack() {
 ^ (Relevant source part starts here and spans across multiple lines).
/sb/blackjack.sol:95:2: Warning: No visibility specified. Defaulting to "public". 
	function () payable {
 ^ (Relevant source part starts here and spans across multiple lines).
/sb/blackjack.sol:144:8: Warning: Unused local variable.
		var (houseScore, houseScoreBig) = calculateScore(games[msg.sender].houseCards);
		     ^--------^
/sb/blackjack.sol:15:2: Warning: Function state mutability can be restricted to view
	function deal(address player, uint8 cardNumber) internal returns (uint8) {
 ^ (Relevant source part starts here and spans across multiple lines).
/sb/blackjack.sol:24:2: Warning: Function state mutability can be restricted to pure
	function valueOf(uint8 card, bool isBigAce) internal constant returns (uint8) {
 ^ (Relevant source part starts here and spans across multiple lines).
/sb/blackjack.sol:35:2: Warning: Function state mutability can be restricted to pure
	function isAce(uint8 card) internal constant returns (bool) {
 ^ (Relevant source part starts here and spans across multiple lines).
/sb/blackjack.sol:39:2: Warning: Function state mutability can be restricted to pure
	function isTen(uint8 card) internal constant returns (bool) {
 ^ (Relevant source part starts here and spans across multiple lines).

INFO:root:contract /sb/blackjack.sol:Deck:
INFO:symExec:	============ Results ===========
INFO:symExec:	  EVM Code Coverage: 			 100.0%
INFO:symExec:	  Integer Underflow: 			 False
INFO:symExec:	  Integer Overflow: 			 False
INFO:symExec:	  Parity Multisig Bug 2: 		 False
INFO:symExec:	  Callstack Depth Attack Vulnerability:  False
INFO:symExec:	  Transaction-Ordering Dependence (TOD): False
INFO:symExec:	  Timestamp Dependency: 		 False
INFO:symExec:	  Re-Entrancy Vulnerability: 		 False
INFO:symExec:	====== Analysis Completed ======
INFO:root:contract /sb/blackjack.sol:BlackJack:
INFO:symExec:	============ Results ===========
INFO:symExec:	  EVM Code Coverage: 			 34.8%
INFO:symExec:	  Integer Underflow: 			 False
INFO:symExec:	  Integer Overflow: 			 True
INFO:symExec:	  Parity Multisig Bug 2: 		 False
INFO:symExec:	  Callstack Depth Attack Vulnerability:  False
INFO:symExec:	  Transaction-Ordering Dependence (TOD): False
INFO:symExec:	  Timestamp Dependency: 		 False
INFO:symExec:	  Re-Entrancy Vulnerability: 		 False
INFO:symExec:/sb/blackjack.sol:135:15: Warning: Integer Overflow.
		games[msg.sender].playerCards.push(Deck.
/sb/blackjack.sol:135:47: Warning: Integer Overflow.
		games[msg.sender].playerCards.push(Deck.deal(msg.sender, nextCard));
		^
Spanning multiple lines.
/sb/blackjack.sol:68:4: Warning: Integer Overflow.
	modifier gameIsGoingOn() {
	^
Spanning multiple lines.
/sb/blackjack.sol:280:37: Warning: Integer Overflow.
	function getPlayerCardsNumber() public gameIsGoingOn constant r
/sb/blackjack.sol:280:37: Warning: Integer Overflow.
	function getPlayerCardsNumber() public gameIsGoingOn constant retur
/sb/blackjack.sol:288:34: Warning: Integer Overflow.
	function getGameState() public constant returns (uint8) {
	^
Spanning multiple lines.
/sb/blackjack.sol:298:24: Warning: Integer Overflow.
		if (game.state == GameState.Hou
/sb/blackjack.sol:301:25: Warning: Integer Overflow.
		if (game.state == GameState.Tie)
/sb/blackjack.sol:305:26: Warning: Integer Overflow.
		return 0; // the game is still go
/sb/blackjack.sol:146:13: Warning: Integer Overflow.
		while (houseScoreBig < 17) {
		^
Spanning multiple lines.
/sb/blackjack.sol:273:36: Warning: Integer Overflow.
	function getHouseCard(uint8 id) public gameIsGoingOn constant r
/sb/blackjack.sol:273:36: Warning: Integer Overflow.
	function getHouseCard(uint8 id) public gameIsGoingOn constant retur
/sb/blackjack.sol:284:33: Warning: Integer Overflow.
	function getHouseCardsNumber() public gameIsGoingOn constant
INFO:symExec:	====== Analysis Completed ======
