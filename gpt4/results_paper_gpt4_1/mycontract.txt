The smart contract you provided has the following vulnerabilities:

1. **Usage of tx.origin for authorization**: The smart contract uses `tx.origin` for verifying the owner of the contract. This can be a serious security vulnerability as it allows any contract that is called by the owner to perform actions on their behalf. It's a recommended practice to use `msg.sender` for authorization.

2. **No access control in constructor**: The constructor function does not have any access control. This means that anyone can call the constructor and become the owner of the contract. To avoid this, it should be made sure that the constructor can be called only once.

3. **Potential for Denial of Service**: If the 'receiver' address is a contract and it has a fallback function that consumes a lot of gas or reverts, it could potentially block this function from successfully executing. This could be mitigated by using the withdrawal pattern instead of direct transfers, i.e., allowing addresses to withdraw their own funds rather than directly sending funds to them.

4. **No value checks**: The function `sendTo` does not check if the contract has enough balance to send. This could lead to unexpected behavior.

5. **Unchecked Return Values**: The `transfer` function used in the contract returns a boolean value indicating the success or failure of the operation. In this contract, the return value is not checked which could lead to unexpected behavior.

6. **Missing Function Visibility**: The function `sendTo` is `public` by default, this could lead to unexpected behavior or misuse of the function. It's always a good practice to explicitly specify the visibility of each function.

To fix these vulnerabilities, you should apply proper access control, replace `tx.origin` with `msg.sender`, add value checks, handle potential denial of service attacks (using withdrawal pattern), check the return value of transfer function and explicitly specify function visibility.