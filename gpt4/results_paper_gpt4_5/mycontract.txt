This smart contract has a couple of potential vulnerabilities:

1. Access Control: The contract uses `tx.origin` for access control, which is generally not recommended. `tx.origin` refers to the original address that started the transaction and could be manipulated by a malicious contract. It's safer to use `msg.sender` which refers to the immediate sender of the transaction.

2. Unchecked Return Values For Low Level Calls: The transfer function does not check the return value. If the transfer fails, the contract cannot handle it, which could result in unexpected behavior.

3. Denial of Service: The contract is potentially vulnerable to a Denial of Service attack. If the receiver contract's fallback function consumes a lot of gas or triggers an exception, it could block the `sendTo` function from being executed.

4. Time Manipulation: While it's not immediately apparent in the provided code, it's generally good practice to be aware that reliance on block timestamps (`now`) can be manipulated by miners. In this case, this vulnerability isn't present but should be kept in mind.

5. Short Address Attack: If the address of the receiver is not validated, it could potentially be vulnerable to a short address attack.

Fixing the vulnerabilities would involve replacing `tx.origin` with `msg.sender`, adding a check for the result of the `transfer` function, and ensuring that the address of the receiver is validated properly. It's also worth considering using a pattern like the withdrawal pattern to prevent potential denial of service attacks.