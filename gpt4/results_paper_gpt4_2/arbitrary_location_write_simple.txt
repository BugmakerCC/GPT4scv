The smart contract you provided has the following vulnerabilities:

1. Arithmetic Issue (Integer Underflow): In the 'PopBonusCode' function, the 'bonusCodes.length--' operation can cause an underflow if the 'bonusCodes' array is empty. This is because solidity uses unsigned integers for array lengths, and so if the length of the array is 0 and you subtract 1 from it, the length of the array will underflow to a very large number. This can cause unexpected behavior in the smart contract.

2. Access Control: The 'PushBonusCode', 'PopBonusCode', and 'UpdateBonusCodeAt' functions do not check whether the caller of the function is authorized to perform the operation. In the case of 'PushBonusCode' and 'UpdateBonusCodeAt', anyone can add or change bonus codes, which may not be the desired behavior. In the case of 'PopBonusCode', anyone can delete bonus codes, which can be a serious security issue.

3. Unchecked Return Value: The fallback function, which is payable, does not check the return value of the 'send' or 'transfer' function. This could potentially lead to unexpected behavior if the send or transfer fails.

4. Denial of Service: If an attacker has large amounts of Ether, they could continuously send Ether to this contract without ever calling the 'PopBonusCode' or 'UpdateBonusCodeAt' functions. This could potentially fill up the 'bonusCodes' array and make the contract unusable.

Recommendations for fixing these vulnerabilities are:

1. Arithmetic Issue: Check that the 'bonusCodes' array is not empty before subtracting from its length.

2. Access Control: Implement access control mechanisms to ensure that only authorized users can call the 'PushBonusCode', 'PopBonusCode', and 'UpdateBonusCodeAt' functions.

3. Unchecked Return Value: Check the return value of the 'send' or 'transfer' function in the fallback function and handle failures appropriately.

4. Denial of Service: Implement a mechanism to prevent the 'bonusCodes' array from growing indefinitely, such as setting a maximum size for the array.