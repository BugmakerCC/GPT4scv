The smart contract provided has several vulnerabilities:

1. Access Control: The contract is checking `tx.origin` instead of `msg.sender` in the `withdrawAll` function. `tx.origin` refers to the original address that initiated the transaction, which can be different from `msg.sender` if a contract forwards a call. An attacker can create a malicious contract that calls this contract's `withdrawAll` function and the `tx.origin` will still refer to the original address that initiated the transaction, hence bypassing the access control.

2. Reentrancy: The contract is vulnerable to a reentrancy attack because it calls an external function `transfer` before it decreases the balance. An attacker can cause the `transfer` function to fall back to a malicious contract that calls `withdrawAll` again, effectively draining the contract's balance.

3. Denial of Service: The `withdrawAll` function transfers all the ether in the contract to a recipient. If an attacker is able to repeatedly call this function (e.g., via reentrancy attack), the contract can be drained of all its funds, effectively disabling it.

4. Unchecked Return Value: The contract calls `transfer` without checking the return value. If the transfer fails for any reason (e.g., the recipient is a contract without a payable fallback function), the contract's state will not reflect this and it will continue to believe it has less ether than it actually does.

Recommendations to fix these vulnerabilities:

- Use `msg.sender` instead of `tx.origin` for access control.
- Use the Checks-Effects-Interactions pattern to avoid reentrancy attacks: checks (like require statements) should be done before interactions (like calling external functions).
- Use `pull` payments instead of `push` payments: instead of the contract sending ether itself, allow recipients to withdraw their own funds. This can prevent DoS attacks.
- Always check the return value of `transfer` and handle failure cases appropriately.