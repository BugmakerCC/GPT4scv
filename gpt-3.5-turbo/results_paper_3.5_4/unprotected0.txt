After reviewing the provided smart contract, I have identified a few potential vulnerabilities:

1. Access Control: The `changeOwner` function does not have any access control mechanisms in place, allowing anyone to call the function and change the owner of the contract.

2. Reentrancy: Although not directly present in the provided contract, if the `owner` is a contract instead of an externally-owned account, it could potentially initiate a reentrant attack by calling another contract before completing its own execution.

To fix these vulnerabilities, you can make the following changes to the contract:

```
pragma solidity ^0.4.15;

contract Unprotected {
    address private owner;

    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }

    function Unprotected() public {
        owner = msg.sender;
    }

    // This function should be protected
    function changeOwner(address _newOwner) public onlyOwner {
        owner = _newOwner;
    }
}
```

By adding the `onlyOwner` modifier to the `changeOwner` function, only the contract owner will be able to execute it. This ensures that only authorized parties can change the owner of the contract and mitigates the access control vulnerability.

Please note that while these changes address the identified vulnerabilities, it is always recommended to have a comprehensive security review and testing process for your smart contracts.