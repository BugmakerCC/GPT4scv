This smart contract seems to be free from the nine common vulnerabilities mentioned. 

1. Reentrancy: There are no external calls to other contracts, so reentrancy is not a concern.

2. Access Control: There is an "onlyOwner" modifier in the Ownable contract, which restricts certain functions to be called only by the owner.

3. Arithmetic Issues: The SafeMath library is used for all mathematical operations, which prevents integer overflow and underflow.

4. Unchecked Return Values For Low Level Calls: There are no low level calls (e.g., call.value()) in this contract.

5. Denial of Service: There are no loops or operations that could consume excessive gas or cause a denial of service.

6. Bad Randomness: There is no usage of random numbers in this contract.

7. Front-Running: There are no operations that could be front-run.

8. Time manipulation: There is no usage of timestamps in this contract.

9. Short Address Attack: The contract does not have any external calls with dynamic input lengths, so short address attacks are not possible.

Overall, this contract seems to be well-designed and free from these common vulnerabilities.