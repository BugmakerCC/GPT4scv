The given smart contract is vulnerable to the following vulnerabilities:

1. Reentrancy: The contract does not have any mutex or lock mechanism to prevent reentrant calls to the `sendTo` function. An attacker could create a malicious contract that calls the `sendTo` function repeatedly before the previous call completes, allowing them to drain the contract's balance.

2. Access Control: The contract uses the `tx.origin` variable to check if the caller is the contract owner. However, `tx.origin` can be manipulated by an attacker in case of a contract-to-contract call. It is recommended to use `msg.sender` instead for access control.

3. Unchecked Return Values For Low-Level Calls: The contract uses `receiver.transfer(amount)` to send funds to the receiver address. However, this low-level call does not check the return value, which can lead to a failure in transferring funds without raising an exception. It is recommended to use the `send` or `call` methods and handle the return value appropriately.

To fix these vulnerabilities, you can make the following modifications to the contract:

pragma solidity ^0.4.24;

contract MyContract {
    address owner;

    constructor() public {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the contract owner can perform this action");
        _;
    }

    function sendTo(address receiver, uint amount) public onlyOwner {
        require(address(this).balance >= amount, "Insufficient balance");

        // Use the 'call' method and check the return value
        require(receiver.call.value(amount)(), "Failed to send funds");
    }

    // Add a fallback function to receive funds
    function () external payable {}
}

In the modified contract:
- We use the `onlyOwner` modifier to ensure that only the contract owner can call the `sendTo` function.
- We check the contract's balance before transferring funds to avoid sending more funds than available.
- We use the `call.value()` syntax to send funds to the receiver address and check the return value for success.
- We add a fallback function to receive funds, which is necessary when using the `call.value()` syntax.

These modifications address the identified vulnerabilities and improve the security of the smart contract.