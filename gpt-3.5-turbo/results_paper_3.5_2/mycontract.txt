Here's an analysis of the provided smart contract for the nine common vulnerabilities:

1. Reentrancy: The contract does not have any external calls that can lead to reentrancy vulnerabilities.

2. Access Control: The contract has an owner variable that is set during deployment. The `sendTo` function checks if the caller is the owner using `tx.origin`. This is a vulnerability as `tx.origin` can be manipulated by an attacker. It is recommended to use `msg.sender` instead.

3. Arithmetic Issues: There are no arithmetic operations in the contract, so there are no arithmetic issues.

4. Unchecked Return Values For Low Level Calls: The `transfer` function used in the `sendTo` function is considered safe as it automatically throws an exception in case of failure, reverting the state changes.

5. Denial of Service: The contract does not have any explicit gas limit checks or potential denial of service vulnerabilities.

6. Bad Randomness: The contract does not have any randomness-related functions, so there are no bad randomness vulnerabilities.

7. Front-Running: The contract does not have any specific front-running vulnerabilities.

8. Time Manipulation: The contract does not rely on timestamps, so there are no timestamp manipulation vulnerabilities.

9. Short Address Attack: The contract does not have any off-chain issues to exploit, so there are no short address attack vulnerabilities.

Overall, the contract has one vulnerability related to access control. It is recommended to replace `tx.origin` with `msg.sender` in the `require` statement to fix the vulnerability.