After carefully reviewing the provided smart contract, here are the vulnerabilities found:

1. Reentrancy: The `sendTo` function does not implement any reentrancy protection. If the `receiver` contract has a fallback function that can make recursive calls, it can exploit this vulnerability to drain funds from the `MyContract` contract.

2. Access Control: The `owner` variable is used to restrict access to the `sendTo` function, but it relies on the `tx.origin` property, which is generally considered unsafe for access control. An attacker could use a proxy contract to bypass this check and call the `sendTo` function.

3. Arithmetic Issues: There are no arithmetic operations in the provided contract, so this vulnerability is not applicable.

4. Unchecked Return Values for Low-Level Calls: The `transfer` function is used to send funds to the `receiver` address, but it does not check the return value. If the `receiver` contract has a fallback function that throws an exception or fails, the `sendTo` function will not handle the failure and will not revert the transaction.

5. Denial of Service: The `sendTo` function does not have any gas limit or gas cost control. An attacker could call this function repeatedly with a large `amount` parameter to consume all the available gas and cause a denial of service.

6. Bad Randomness: There are no random number generation operations in the provided contract, so this vulnerability is not applicable.

7. Front-Running: There are no operations susceptible to front-running in the provided contract, so this vulnerability is not applicable.

8. Time Manipulation: There are no timestamp or time-dependent operations in the provided contract, so this vulnerability is not applicable.

9. Short Address Attack: The `sendTo` function does not perform any validation on the `receiver` address, so an attacker could exploit the short address attack vulnerability by providing a maliciously crafted `receiver` address.

To mitigate these vulnerabilities, consider the following changes:

- Implement reentrancy guards using `Mutex` or similar mechanisms in the `sendTo` function.
- Use a more secure access control mechanism, such as the OpenZeppelin `Ownable` contract.
- Check the return value of the `transfer` function and handle failures appropriately.
- Implement gas limits or cost control mechanisms to prevent denial of service attacks.
- Add input validation to prevent short address attacks.

Please note that the provided contract is written in an older version of Solidity (0.4.24) and may have other non-security related issues. It is recommended to update the contract to the latest version of Solidity and follow best practices for secure smart contract development.