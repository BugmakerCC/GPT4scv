This contract has several vulnerabilities:

1. Reentrancy: The WithdrawToHolder function is vulnerable to a reentrancy attack. The contract sends ether with `_addr.call.value(_wei)()` before it reduces the sender's balance `Holders[_addr]-=_wei;`. An attacker can use a fallback function in their contract to call WithdrawToHolder again before `Holders[_addr]-=_wei;` is executed.

2. Access Control: The onlyOwner modifier doesn't use the require statement to revert the transaction if `msg.sender` is not the owner. It just checks the condition and does nothing if it's not met, which means any address can execute the functions with this modifier.

3. Arithmetic Issues: The `Holders[msg.sender]+=msg.value;` can potentially overflow. SafeMath library should be used for arithmetic operations.

4. Unchecked Return Values For Low Level Calls: The contract uses low level `.call()` method in `WithdrawToken` and `WithdrawToHolder` functions without checking the return value.

5. Denial of Service: An attacker can make the contract unusable by always failing the `_addr.call.value(_wei)()` call in the `WithdrawToHolder` function.

6. Bad Randomness: Not applicable, as the contract doesn't use random numbers.

7. Front-Running: Not applicable, as the contract doesn't have functions where transaction ordering would matter.

8. Time manipulation: Not applicable, as the contract doesn't rely on block.timestamp or now.

9. Short Address Attack: Not applicable, as the contract doesn't have any off-chain function calls where the user can manipulate the input data.